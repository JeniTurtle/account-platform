// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
import { GraphQLID as ID } from "graphql";
import {
  ArgsType,
  Field as TypeGraphQLField,
  Float,
  InputType as TypeGraphQLInputType,
  Int
} from "type-graphql";
import { registerEnumType } from "type-graphql";

// eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require("graphql-type-json");

import { BaseWhereInput, PaginationArgs } from "warthog";
import { PermissionIsCategory } from "../../typeorm/entity/auth/permission";
import { PermissionIsGlobal } from "../../typeorm/entity/auth/permission";
import { UserGender } from "../../typeorm/entity/auth/user";
import { UserIsSuperuser } from "../../typeorm/entity/auth/user";
import { UserIsStaff } from "../../typeorm/entity/auth/user";
import { UserIsActive } from "../../typeorm/entity/auth/user";
import { MenuIsCategory } from "../../typeorm/entity/auth/menu";
// @ts-ignore
import { Organization } from "../../typeorm/entity/auth/organization";
// @ts-ignore
import { Department } from "../../typeorm/entity/auth/department";
// @ts-ignore
import { RoleUser } from "../../typeorm/entity/auth/roleUser";
// @ts-ignore
import { Platform } from "../../typeorm/entity/auth/platform";
// @ts-ignore
import { Role } from "../../typeorm/entity/auth/role";
// @ts-ignore
import { PermissionRole } from "../../typeorm/entity/auth/permissionRole";
// @ts-ignore
import { Permission } from "../../typeorm/entity/auth/permission";
// @ts-ignore
import { PermissionUser } from "../../typeorm/entity/auth/permissionUser";
// @ts-ignore
import { User } from "../../typeorm/entity/auth/user";
// @ts-ignore
import { MenuUser } from "../../typeorm/entity/auth/menuUser";
// @ts-ignore
import { MenuRole } from "../../typeorm/entity/auth/menuRole";
// @ts-ignore
import { Menu } from "../../typeorm/entity/auth/menu";

export enum OrganizationOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  organizeName_ASC = "organizeName_ASC",
  organizeName_DESC = "organizeName_DESC",

  location_ASC = "location_ASC",
  location_DESC = "location_DESC"
}

registerEnumType(OrganizationOrderByEnum, {
  name: "OrganizationOrderByInput"
});

@TypeGraphQLInputType()
export class OrganizationWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  organizeName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  organizeName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  organizeName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  organizeName_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  organizeName_in?: string[];

  @TypeGraphQLField({ nullable: true })
  location_eq?: string;

  @TypeGraphQLField({ nullable: true })
  location_contains?: string;

  @TypeGraphQLField({ nullable: true })
  location_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  location_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  location_in?: string[];
}

@TypeGraphQLInputType()
export class OrganizationWhereUniqueInput {
  @TypeGraphQLField(() => String)
  id?: string;
}

@TypeGraphQLInputType()
export class OrganizationCreateInput {
  @TypeGraphQLField()
  organizeName!: string;

  @TypeGraphQLField({ nullable: true })
  location?: string;
}

@TypeGraphQLInputType()
export class OrganizationUpdateInput {
  @TypeGraphQLField({ nullable: true })
  organizeName?: string;

  @TypeGraphQLField({ nullable: true })
  location?: string;
}

@ArgsType()
export class OrganizationWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => OrganizationWhereInput, { nullable: true })
  where?: OrganizationWhereInput;

  @TypeGraphQLField(() => OrganizationOrderByEnum, { nullable: true })
  orderBy?: OrganizationOrderByEnum;
}

@ArgsType()
export class OrganizationCreateManyArgs {
  @TypeGraphQLField(() => [OrganizationCreateInput])
  data!: OrganizationCreateInput[];
}

@ArgsType()
export class OrganizationUpdateArgs {
  @TypeGraphQLField() data!: OrganizationUpdateInput;
  @TypeGraphQLField() where!: OrganizationWhereUniqueInput;
}

export enum DepartmentOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  departmentName_ASC = "departmentName_ASC",
  departmentName_DESC = "departmentName_DESC",

  location_ASC = "location_ASC",
  location_DESC = "location_DESC",

  departmentOrder_ASC = "departmentOrder_ASC",
  departmentOrder_DESC = "departmentOrder_DESC",

  supreiorId_ASC = "supreiorId_ASC",
  supreiorId_DESC = "supreiorId_DESC",

  organizationId_ASC = "organizationId_ASC",
  organizationId_DESC = "organizationId_DESC"
}

registerEnumType(DepartmentOrderByEnum, {
  name: "DepartmentOrderByInput"
});

@TypeGraphQLInputType()
export class DepartmentWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  departmentName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  departmentName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  departmentName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  departmentName_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  departmentName_in?: string[];

  @TypeGraphQLField({ nullable: true })
  location_eq?: string;

  @TypeGraphQLField({ nullable: true })
  location_contains?: string;

  @TypeGraphQLField({ nullable: true })
  location_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  location_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  location_in?: string[];

  @TypeGraphQLField({ nullable: true })
  departmentOrder_eq?: number;

  @TypeGraphQLField({ nullable: true })
  departmentOrder_gt?: number;

  @TypeGraphQLField({ nullable: true })
  departmentOrder_gte?: number;

  @TypeGraphQLField({ nullable: true })
  departmentOrder_lt?: number;

  @TypeGraphQLField({ nullable: true })
  departmentOrder_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  departmentOrder_in?: number[];

  @TypeGraphQLField(() => ID, { nullable: true })
  supreiorId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  supreiorId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  organizationId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  organizationId_in?: string[];
}

@TypeGraphQLInputType()
export class DepartmentWhereUniqueInput {
  @TypeGraphQLField(() => String)
  id?: string;
}

@TypeGraphQLInputType()
export class DepartmentCreateInput {
  @TypeGraphQLField()
  departmentName!: string;

  @TypeGraphQLField({ nullable: true })
  location?: string;

  @TypeGraphQLField({ nullable: true })
  departmentOrder?: number;

  @TypeGraphQLField({ nullable: true })
  supreiorId?: string;

  @TypeGraphQLField({ nullable: true })
  organizationId?: string;
}

@TypeGraphQLInputType()
export class DepartmentUpdateInput {
  @TypeGraphQLField({ nullable: true })
  departmentName?: string;

  @TypeGraphQLField({ nullable: true })
  location?: string;

  @TypeGraphQLField({ nullable: true })
  departmentOrder?: number;

  @TypeGraphQLField({ nullable: true })
  supreiorId?: string;

  @TypeGraphQLField({ nullable: true })
  organizationId?: string;
}

@ArgsType()
export class DepartmentWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => DepartmentWhereInput, { nullable: true })
  where?: DepartmentWhereInput;

  @TypeGraphQLField(() => DepartmentOrderByEnum, { nullable: true })
  orderBy?: DepartmentOrderByEnum;
}

@ArgsType()
export class DepartmentCreateManyArgs {
  @TypeGraphQLField(() => [DepartmentCreateInput])
  data!: DepartmentCreateInput[];
}

@ArgsType()
export class DepartmentUpdateArgs {
  @TypeGraphQLField() data!: DepartmentUpdateInput;
  @TypeGraphQLField() where!: DepartmentWhereUniqueInput;
}

export enum RoleUserOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  userId_ASC = "userId_ASC",
  userId_DESC = "userId_DESC",

  roleId_ASC = "roleId_ASC",
  roleId_DESC = "roleId_DESC"
}

registerEnumType(RoleUserOrderByEnum, {
  name: "RoleUserOrderByInput"
});

@TypeGraphQLInputType()
export class RoleUserWhereInput extends BaseWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  userId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  userId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  roleId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  roleId_in?: string[];
}

@TypeGraphQLInputType()
export class RoleUserWhereUniqueInput {
  @TypeGraphQLField(() => String)
  id?: string;
}

@TypeGraphQLInputType()
export class RoleUserCreateInput {
  @TypeGraphQLField()
  userId!: string;

  @TypeGraphQLField()
  roleId!: string;
}

@TypeGraphQLInputType()
export class RoleUserUpdateInput {
  @TypeGraphQLField({ nullable: true })
  userId?: string;

  @TypeGraphQLField({ nullable: true })
  roleId?: string;
}

@ArgsType()
export class RoleUserWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => RoleUserWhereInput, { nullable: true })
  where?: RoleUserWhereInput;

  @TypeGraphQLField(() => RoleUserOrderByEnum, { nullable: true })
  orderBy?: RoleUserOrderByEnum;
}

@ArgsType()
export class RoleUserCreateManyArgs {
  @TypeGraphQLField(() => [RoleUserCreateInput])
  data!: RoleUserCreateInput[];
}

@ArgsType()
export class RoleUserUpdateArgs {
  @TypeGraphQLField() data!: RoleUserUpdateInput;
  @TypeGraphQLField() where!: RoleUserWhereUniqueInput;
}

export enum PlatformOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  platformName_ASC = "platformName_ASC",
  platformName_DESC = "platformName_DESC",

  platformDesc_ASC = "platformDesc_ASC",
  platformDesc_DESC = "platformDesc_DESC"
}

registerEnumType(PlatformOrderByEnum, {
  name: "PlatformOrderByInput"
});

@TypeGraphQLInputType()
export class PlatformWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  platformName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  platformName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  platformName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  platformName_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  platformName_in?: string[];

  @TypeGraphQLField({ nullable: true })
  platformDesc_eq?: string;

  @TypeGraphQLField({ nullable: true })
  platformDesc_contains?: string;

  @TypeGraphQLField({ nullable: true })
  platformDesc_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  platformDesc_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  platformDesc_in?: string[];
}

@TypeGraphQLInputType()
export class PlatformWhereUniqueInput {
  @TypeGraphQLField(() => String)
  id?: string;
}

@TypeGraphQLInputType()
export class PlatformCreateInput {
  @TypeGraphQLField()
  platformName!: string;

  @TypeGraphQLField()
  platformDesc!: string;
}

@TypeGraphQLInputType()
export class PlatformUpdateInput {
  @TypeGraphQLField({ nullable: true })
  platformName?: string;

  @TypeGraphQLField({ nullable: true })
  platformDesc?: string;
}

@ArgsType()
export class PlatformWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PlatformWhereInput, { nullable: true })
  where?: PlatformWhereInput;

  @TypeGraphQLField(() => PlatformOrderByEnum, { nullable: true })
  orderBy?: PlatformOrderByEnum;
}

@ArgsType()
export class PlatformCreateManyArgs {
  @TypeGraphQLField(() => [PlatformCreateInput])
  data!: PlatformCreateInput[];
}

@ArgsType()
export class PlatformUpdateArgs {
  @TypeGraphQLField() data!: PlatformUpdateInput;
  @TypeGraphQLField() where!: PlatformWhereUniqueInput;
}

export enum RoleOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  roleName_ASC = "roleName_ASC",
  roleName_DESC = "roleName_DESC",

  roleCode_ASC = "roleCode_ASC",
  roleCode_DESC = "roleCode_DESC",

  remark_ASC = "remark_ASC",
  remark_DESC = "remark_DESC",

  platformId_ASC = "platformId_ASC",
  platformId_DESC = "platformId_DESC"
}

registerEnumType(RoleOrderByEnum, {
  name: "RoleOrderByInput"
});

@TypeGraphQLInputType()
export class RoleWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  roleName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  roleName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  roleName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  roleName_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  roleName_in?: string[];

  @TypeGraphQLField({ nullable: true })
  roleCode_eq?: string;

  @TypeGraphQLField({ nullable: true })
  roleCode_contains?: string;

  @TypeGraphQLField({ nullable: true })
  roleCode_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  roleCode_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  roleCode_in?: string[];

  @TypeGraphQLField({ nullable: true })
  remark_eq?: string;

  @TypeGraphQLField({ nullable: true })
  remark_contains?: string;

  @TypeGraphQLField({ nullable: true })
  remark_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  remark_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  remark_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  platformId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  platformId_in?: string[];
}

@TypeGraphQLInputType()
export class RoleWhereUniqueInput {
  @TypeGraphQLField(() => String)
  id?: string;
}

@TypeGraphQLInputType()
export class RoleCreateInput {
  @TypeGraphQLField()
  roleName!: string;

  @TypeGraphQLField()
  roleCode!: string;

  @TypeGraphQLField({ nullable: true })
  remark?: string;

  @TypeGraphQLField({ nullable: true })
  platformId?: string;
}

@TypeGraphQLInputType()
export class RoleUpdateInput {
  @TypeGraphQLField({ nullable: true })
  roleName?: string;

  @TypeGraphQLField({ nullable: true })
  roleCode?: string;

  @TypeGraphQLField({ nullable: true })
  remark?: string;

  @TypeGraphQLField({ nullable: true })
  platformId?: string;
}

@ArgsType()
export class RoleWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => RoleWhereInput, { nullable: true })
  where?: RoleWhereInput;

  @TypeGraphQLField(() => RoleOrderByEnum, { nullable: true })
  orderBy?: RoleOrderByEnum;
}

@ArgsType()
export class RoleCreateManyArgs {
  @TypeGraphQLField(() => [RoleCreateInput])
  data!: RoleCreateInput[];
}

@ArgsType()
export class RoleUpdateArgs {
  @TypeGraphQLField() data!: RoleUpdateInput;
  @TypeGraphQLField() where!: RoleWhereUniqueInput;
}

export enum PermissionRoleOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  roleId_ASC = "roleId_ASC",
  roleId_DESC = "roleId_DESC",

  permissionId_ASC = "permissionId_ASC",
  permissionId_DESC = "permissionId_DESC"
}

registerEnumType(PermissionRoleOrderByEnum, {
  name: "PermissionRoleOrderByInput"
});

@TypeGraphQLInputType()
export class PermissionRoleWhereInput extends BaseWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  roleId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  roleId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  permissionId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  permissionId_in?: string[];
}

@TypeGraphQLInputType()
export class PermissionRoleWhereUniqueInput {
  @TypeGraphQLField(() => String)
  id?: string;
}

@TypeGraphQLInputType()
export class PermissionRoleCreateInput {
  @TypeGraphQLField()
  roleId!: string;

  @TypeGraphQLField()
  permissionId!: string;
}

@TypeGraphQLInputType()
export class PermissionRoleUpdateInput {
  @TypeGraphQLField({ nullable: true })
  roleId?: string;

  @TypeGraphQLField({ nullable: true })
  permissionId?: string;
}

@ArgsType()
export class PermissionRoleWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PermissionRoleWhereInput, { nullable: true })
  where?: PermissionRoleWhereInput;

  @TypeGraphQLField(() => PermissionRoleOrderByEnum, { nullable: true })
  orderBy?: PermissionRoleOrderByEnum;
}

@ArgsType()
export class PermissionRoleCreateManyArgs {
  @TypeGraphQLField(() => [PermissionRoleCreateInput])
  data!: PermissionRoleCreateInput[];
}

@ArgsType()
export class PermissionRoleUpdateArgs {
  @TypeGraphQLField() data!: PermissionRoleUpdateInput;
  @TypeGraphQLField() where!: PermissionRoleWhereUniqueInput;
}

export enum PermissionOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  code_ASC = "code_ASC",
  code_DESC = "code_DESC",

  isCategory_ASC = "isCategory_ASC",
  isCategory_DESC = "isCategory_DESC",

  isGlobal_ASC = "isGlobal_ASC",
  isGlobal_DESC = "isGlobal_DESC",

  remark_ASC = "remark_ASC",
  remark_DESC = "remark_DESC",

  supreiorId_ASC = "supreiorId_ASC",
  supreiorId_DESC = "supreiorId_DESC",

  platformId_ASC = "platformId_ASC",
  platformId_DESC = "platformId_DESC"
}

registerEnumType(PermissionOrderByEnum, {
  name: "PermissionOrderByInput"
});

@TypeGraphQLInputType()
export class PermissionWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  code_eq?: string;

  @TypeGraphQLField({ nullable: true })
  code_contains?: string;

  @TypeGraphQLField({ nullable: true })
  code_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  code_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  code_in?: string[];

  @TypeGraphQLField(() => PermissionIsCategory, { nullable: true })
  isCategory_eq?: PermissionIsCategory;

  @TypeGraphQLField(() => [PermissionIsCategory], { nullable: true })
  isCategory_in?: PermissionIsCategory[];

  @TypeGraphQLField(() => PermissionIsGlobal, { nullable: true })
  isGlobal_eq?: PermissionIsGlobal;

  @TypeGraphQLField(() => [PermissionIsGlobal], { nullable: true })
  isGlobal_in?: PermissionIsGlobal[];

  @TypeGraphQLField({ nullable: true })
  remark_eq?: string;

  @TypeGraphQLField({ nullable: true })
  remark_contains?: string;

  @TypeGraphQLField({ nullable: true })
  remark_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  remark_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  remark_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  supreiorId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  supreiorId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  platformId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  platformId_in?: string[];
}

@TypeGraphQLInputType()
export class PermissionWhereUniqueInput {
  @TypeGraphQLField(() => String)
  id?: string;
}

@TypeGraphQLInputType()
export class PermissionCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  code!: string;

  @TypeGraphQLField(() => PermissionIsCategory)
  isCategory!: PermissionIsCategory;

  @TypeGraphQLField(() => PermissionIsGlobal)
  isGlobal!: PermissionIsGlobal;

  @TypeGraphQLField({ nullable: true })
  remark?: string;

  @TypeGraphQLField({ nullable: true })
  supreiorId?: string;

  @TypeGraphQLField({ nullable: true })
  platformId?: string;
}

@TypeGraphQLInputType()
export class PermissionUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  code?: string;

  @TypeGraphQLField(() => PermissionIsCategory, { nullable: true })
  isCategory?: PermissionIsCategory;

  @TypeGraphQLField(() => PermissionIsGlobal, { nullable: true })
  isGlobal?: PermissionIsGlobal;

  @TypeGraphQLField({ nullable: true })
  remark?: string;

  @TypeGraphQLField({ nullable: true })
  supreiorId?: string;

  @TypeGraphQLField({ nullable: true })
  platformId?: string;
}

@ArgsType()
export class PermissionWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PermissionWhereInput, { nullable: true })
  where?: PermissionWhereInput;

  @TypeGraphQLField(() => PermissionOrderByEnum, { nullable: true })
  orderBy?: PermissionOrderByEnum;
}

@ArgsType()
export class PermissionCreateManyArgs {
  @TypeGraphQLField(() => [PermissionCreateInput])
  data!: PermissionCreateInput[];
}

@ArgsType()
export class PermissionUpdateArgs {
  @TypeGraphQLField() data!: PermissionUpdateInput;
  @TypeGraphQLField() where!: PermissionWhereUniqueInput;
}

export enum PermissionUserOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  userId_ASC = "userId_ASC",
  userId_DESC = "userId_DESC",

  permissionId_ASC = "permissionId_ASC",
  permissionId_DESC = "permissionId_DESC"
}

registerEnumType(PermissionUserOrderByEnum, {
  name: "PermissionUserOrderByInput"
});

@TypeGraphQLInputType()
export class PermissionUserWhereInput extends BaseWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  userId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  userId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  permissionId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  permissionId_in?: string[];
}

@TypeGraphQLInputType()
export class PermissionUserWhereUniqueInput {
  @TypeGraphQLField(() => String)
  id?: string;
}

@TypeGraphQLInputType()
export class PermissionUserCreateInput {
  @TypeGraphQLField()
  userId!: string;

  @TypeGraphQLField()
  permissionId!: string;
}

@TypeGraphQLInputType()
export class PermissionUserUpdateInput {
  @TypeGraphQLField({ nullable: true })
  userId?: string;

  @TypeGraphQLField({ nullable: true })
  permissionId?: string;
}

@ArgsType()
export class PermissionUserWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PermissionUserWhereInput, { nullable: true })
  where?: PermissionUserWhereInput;

  @TypeGraphQLField(() => PermissionUserOrderByEnum, { nullable: true })
  orderBy?: PermissionUserOrderByEnum;
}

@ArgsType()
export class PermissionUserCreateManyArgs {
  @TypeGraphQLField(() => [PermissionUserCreateInput])
  data!: PermissionUserCreateInput[];
}

@ArgsType()
export class PermissionUserUpdateArgs {
  @TypeGraphQLField() data!: PermissionUserUpdateInput;
  @TypeGraphQLField() where!: PermissionUserWhereUniqueInput;
}

export enum UserOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  username_ASC = "username_ASC",
  username_DESC = "username_DESC",

  password_ASC = "password_ASC",
  password_DESC = "password_DESC",

  realname_ASC = "realname_ASC",
  realname_DESC = "realname_DESC",

  nickname_ASC = "nickname_ASC",
  nickname_DESC = "nickname_DESC",

  gender_ASC = "gender_ASC",
  gender_DESC = "gender_DESC",

  isSuperuser_ASC = "isSuperuser_ASC",
  isSuperuser_DESC = "isSuperuser_DESC",

  isStaff_ASC = "isStaff_ASC",
  isStaff_DESC = "isStaff_DESC",

  isActive_ASC = "isActive_ASC",
  isActive_DESC = "isActive_DESC",

  email_ASC = "email_ASC",
  email_DESC = "email_DESC",

  mobile_ASC = "mobile_ASC",
  mobile_DESC = "mobile_DESC",

  firstLoginTime_ASC = "firstLoginTime_ASC",
  firstLoginTime_DESC = "firstLoginTime_DESC",

  lastLoginTime_ASC = "lastLoginTime_ASC",
  lastLoginTime_DESC = "lastLoginTime_DESC",

  departmentId_ASC = "departmentId_ASC",
  departmentId_DESC = "departmentId_DESC",

  organizationId_ASC = "organizationId_ASC",
  organizationId_DESC = "organizationId_DESC",

  platformId_ASC = "platformId_ASC",
  platformId_DESC = "platformId_DESC"
}

registerEnumType(UserOrderByEnum, {
  name: "UserOrderByInput"
});

@TypeGraphQLInputType()
export class UserWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  username_eq?: string;

  @TypeGraphQLField({ nullable: true })
  username_contains?: string;

  @TypeGraphQLField({ nullable: true })
  username_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  username_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  username_in?: string[];

  @TypeGraphQLField({ nullable: true })
  password_eq?: string;

  @TypeGraphQLField({ nullable: true })
  password_contains?: string;

  @TypeGraphQLField({ nullable: true })
  password_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  password_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  password_in?: string[];

  @TypeGraphQLField({ nullable: true })
  realname_eq?: string;

  @TypeGraphQLField({ nullable: true })
  realname_contains?: string;

  @TypeGraphQLField({ nullable: true })
  realname_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  realname_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  realname_in?: string[];

  @TypeGraphQLField({ nullable: true })
  nickname_eq?: string;

  @TypeGraphQLField({ nullable: true })
  nickname_contains?: string;

  @TypeGraphQLField({ nullable: true })
  nickname_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  nickname_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  nickname_in?: string[];

  @TypeGraphQLField(() => UserGender, { nullable: true })
  gender_eq?: UserGender;

  @TypeGraphQLField(() => [UserGender], { nullable: true })
  gender_in?: UserGender[];

  @TypeGraphQLField(() => UserIsSuperuser, { nullable: true })
  isSuperuser_eq?: UserIsSuperuser;

  @TypeGraphQLField(() => [UserIsSuperuser], { nullable: true })
  isSuperuser_in?: UserIsSuperuser[];

  @TypeGraphQLField(() => UserIsStaff, { nullable: true })
  isStaff_eq?: UserIsStaff;

  @TypeGraphQLField(() => [UserIsStaff], { nullable: true })
  isStaff_in?: UserIsStaff[];

  @TypeGraphQLField(() => UserIsActive, { nullable: true })
  isActive_eq?: UserIsActive;

  @TypeGraphQLField(() => [UserIsActive], { nullable: true })
  isActive_in?: UserIsActive[];

  @TypeGraphQLField({ nullable: true })
  email_eq?: string;

  @TypeGraphQLField({ nullable: true })
  email_contains?: string;

  @TypeGraphQLField({ nullable: true })
  email_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  email_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  email_in?: string[];

  @TypeGraphQLField({ nullable: true })
  mobile_eq?: string;

  @TypeGraphQLField({ nullable: true })
  mobile_contains?: string;

  @TypeGraphQLField({ nullable: true })
  mobile_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  mobile_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  mobile_in?: string[];

  @TypeGraphQLField({ nullable: true })
  firstLoginTime_gt?: Date;

  @TypeGraphQLField({ nullable: true })
  firstLoginTime_gte?: Date;

  @TypeGraphQLField({ nullable: true })
  firstLoginTime_lt?: Date;

  @TypeGraphQLField({ nullable: true })
  firstLoginTime_lte?: Date;

  @TypeGraphQLField({ nullable: true })
  lastLoginTime_gt?: Date;

  @TypeGraphQLField({ nullable: true })
  lastLoginTime_gte?: Date;

  @TypeGraphQLField({ nullable: true })
  lastLoginTime_lt?: Date;

  @TypeGraphQLField({ nullable: true })
  lastLoginTime_lte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  departmentId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  departmentId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  organizationId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  organizationId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  platformId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  platformId_in?: string[];
}

@TypeGraphQLInputType()
export class UserWhereUniqueInput {
  @TypeGraphQLField(() => String, { nullable: true })
  id?: string;

  @TypeGraphQLField(() => String, { nullable: true })
  username?: string;

  @TypeGraphQLField(() => String, { nullable: true })
  email?: string;
}

@TypeGraphQLInputType()
export class UserCreateInput {
  @TypeGraphQLField()
  username!: string;

  @TypeGraphQLField()
  password!: string;

  @TypeGraphQLField({ nullable: true })
  realname?: string;

  @TypeGraphQLField({ nullable: true })
  nickname?: string;

  @TypeGraphQLField(() => UserGender)
  gender!: UserGender;

  @TypeGraphQLField(() => UserIsSuperuser)
  isSuperuser!: UserIsSuperuser;

  @TypeGraphQLField(() => UserIsStaff)
  isStaff!: UserIsStaff;

  @TypeGraphQLField(() => UserIsActive)
  isActive!: UserIsActive;

  @TypeGraphQLField({ nullable: true })
  email?: string;

  @TypeGraphQLField({ nullable: true })
  mobile?: string;

  @TypeGraphQLField({ nullable: true })
  firstLoginTime?: Date;

  @TypeGraphQLField({ nullable: true })
  lastLoginTime?: Date;

  @TypeGraphQLField({ nullable: true })
  departmentId?: string;

  @TypeGraphQLField({ nullable: true })
  organizationId?: string;

  @TypeGraphQLField({ nullable: true })
  platformId?: string;
}

@TypeGraphQLInputType()
export class UserUpdateInput {
  @TypeGraphQLField({ nullable: true })
  username?: string;

  @TypeGraphQLField({ nullable: true })
  password?: string;

  @TypeGraphQLField({ nullable: true })
  realname?: string;

  @TypeGraphQLField({ nullable: true })
  nickname?: string;

  @TypeGraphQLField(() => UserGender, { nullable: true })
  gender?: UserGender;

  @TypeGraphQLField(() => UserIsSuperuser, { nullable: true })
  isSuperuser?: UserIsSuperuser;

  @TypeGraphQLField(() => UserIsStaff, { nullable: true })
  isStaff?: UserIsStaff;

  @TypeGraphQLField(() => UserIsActive, { nullable: true })
  isActive?: UserIsActive;

  @TypeGraphQLField({ nullable: true })
  email?: string;

  @TypeGraphQLField({ nullable: true })
  mobile?: string;

  @TypeGraphQLField({ nullable: true })
  firstLoginTime?: Date;

  @TypeGraphQLField({ nullable: true })
  lastLoginTime?: Date;

  @TypeGraphQLField({ nullable: true })
  departmentId?: string;

  @TypeGraphQLField({ nullable: true })
  organizationId?: string;

  @TypeGraphQLField({ nullable: true })
  platformId?: string;
}

@ArgsType()
export class UserWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => UserWhereInput, { nullable: true })
  where?: UserWhereInput;

  @TypeGraphQLField(() => UserOrderByEnum, { nullable: true })
  orderBy?: UserOrderByEnum;
}

@ArgsType()
export class UserCreateManyArgs {
  @TypeGraphQLField(() => [UserCreateInput])
  data!: UserCreateInput[];
}

@ArgsType()
export class UserUpdateArgs {
  @TypeGraphQLField() data!: UserUpdateInput;
  @TypeGraphQLField() where!: UserWhereUniqueInput;
}

export enum MenuUserOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  userId_ASC = "userId_ASC",
  userId_DESC = "userId_DESC",

  menuId_ASC = "menuId_ASC",
  menuId_DESC = "menuId_DESC"
}

registerEnumType(MenuUserOrderByEnum, {
  name: "MenuUserOrderByInput"
});

@TypeGraphQLInputType()
export class MenuUserWhereInput extends BaseWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  userId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  userId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  menuId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  menuId_in?: string[];
}

@TypeGraphQLInputType()
export class MenuUserWhereUniqueInput {
  @TypeGraphQLField(() => String)
  id?: string;
}

@TypeGraphQLInputType()
export class MenuUserCreateInput {
  @TypeGraphQLField()
  userId!: string;

  @TypeGraphQLField()
  menuId!: string;
}

@TypeGraphQLInputType()
export class MenuUserUpdateInput {
  @TypeGraphQLField({ nullable: true })
  userId?: string;

  @TypeGraphQLField({ nullable: true })
  menuId?: string;
}

@ArgsType()
export class MenuUserWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => MenuUserWhereInput, { nullable: true })
  where?: MenuUserWhereInput;

  @TypeGraphQLField(() => MenuUserOrderByEnum, { nullable: true })
  orderBy?: MenuUserOrderByEnum;
}

@ArgsType()
export class MenuUserCreateManyArgs {
  @TypeGraphQLField(() => [MenuUserCreateInput])
  data!: MenuUserCreateInput[];
}

@ArgsType()
export class MenuUserUpdateArgs {
  @TypeGraphQLField() data!: MenuUserUpdateInput;
  @TypeGraphQLField() where!: MenuUserWhereUniqueInput;
}

export enum MenuRoleOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  roleId_ASC = "roleId_ASC",
  roleId_DESC = "roleId_DESC",

  menuId_ASC = "menuId_ASC",
  menuId_DESC = "menuId_DESC"
}

registerEnumType(MenuRoleOrderByEnum, {
  name: "MenuRoleOrderByInput"
});

@TypeGraphQLInputType()
export class MenuRoleWhereInput extends BaseWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  roleId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  roleId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  menuId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  menuId_in?: string[];
}

@TypeGraphQLInputType()
export class MenuRoleWhereUniqueInput {
  @TypeGraphQLField(() => String)
  id?: string;
}

@TypeGraphQLInputType()
export class MenuRoleCreateInput {
  @TypeGraphQLField()
  roleId!: string;

  @TypeGraphQLField()
  menuId!: string;
}

@TypeGraphQLInputType()
export class MenuRoleUpdateInput {
  @TypeGraphQLField({ nullable: true })
  roleId?: string;

  @TypeGraphQLField({ nullable: true })
  menuId?: string;
}

@ArgsType()
export class MenuRoleWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => MenuRoleWhereInput, { nullable: true })
  where?: MenuRoleWhereInput;

  @TypeGraphQLField(() => MenuRoleOrderByEnum, { nullable: true })
  orderBy?: MenuRoleOrderByEnum;
}

@ArgsType()
export class MenuRoleCreateManyArgs {
  @TypeGraphQLField(() => [MenuRoleCreateInput])
  data!: MenuRoleCreateInput[];
}

@ArgsType()
export class MenuRoleUpdateArgs {
  @TypeGraphQLField() data!: MenuRoleUpdateInput;
  @TypeGraphQLField() where!: MenuRoleWhereUniqueInput;
}

export enum MenuOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  code_ASC = "code_ASC",
  code_DESC = "code_DESC",

  path_ASC = "path_ASC",
  path_DESC = "path_DESC",

  icon_ASC = "icon_ASC",
  icon_DESC = "icon_DESC",

  order_ASC = "order_ASC",
  order_DESC = "order_DESC",

  isCategory_ASC = "isCategory_ASC",
  isCategory_DESC = "isCategory_DESC",

  remark_ASC = "remark_ASC",
  remark_DESC = "remark_DESC",

  supreiorId_ASC = "supreiorId_ASC",
  supreiorId_DESC = "supreiorId_DESC",

  platformId_ASC = "platformId_ASC",
  platformId_DESC = "platformId_DESC"
}

registerEnumType(MenuOrderByEnum, {
  name: "MenuOrderByInput"
});

@TypeGraphQLInputType()
export class MenuWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  code_eq?: string;

  @TypeGraphQLField({ nullable: true })
  code_contains?: string;

  @TypeGraphQLField({ nullable: true })
  code_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  code_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  code_in?: string[];

  @TypeGraphQLField({ nullable: true })
  path_eq?: string;

  @TypeGraphQLField({ nullable: true })
  path_contains?: string;

  @TypeGraphQLField({ nullable: true })
  path_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  path_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  path_in?: string[];

  @TypeGraphQLField({ nullable: true })
  icon_eq?: string;

  @TypeGraphQLField({ nullable: true })
  icon_contains?: string;

  @TypeGraphQLField({ nullable: true })
  icon_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  icon_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  icon_in?: string[];

  @TypeGraphQLField({ nullable: true })
  order_eq?: number;

  @TypeGraphQLField({ nullable: true })
  order_gt?: number;

  @TypeGraphQLField({ nullable: true })
  order_gte?: number;

  @TypeGraphQLField({ nullable: true })
  order_lt?: number;

  @TypeGraphQLField({ nullable: true })
  order_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  order_in?: number[];

  @TypeGraphQLField(() => MenuIsCategory, { nullable: true })
  isCategory_eq?: MenuIsCategory;

  @TypeGraphQLField(() => [MenuIsCategory], { nullable: true })
  isCategory_in?: MenuIsCategory[];

  @TypeGraphQLField({ nullable: true })
  remark_eq?: string;

  @TypeGraphQLField({ nullable: true })
  remark_contains?: string;

  @TypeGraphQLField({ nullable: true })
  remark_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  remark_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  remark_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  supreiorId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  supreiorId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  platformId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  platformId_in?: string[];
}

@TypeGraphQLInputType()
export class MenuWhereUniqueInput {
  @TypeGraphQLField(() => String)
  id?: string;
}

@TypeGraphQLInputType()
export class MenuCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  code!: string;

  @TypeGraphQLField()
  path!: string;

  @TypeGraphQLField()
  icon!: string;

  @TypeGraphQLField({ nullable: true })
  order?: number;

  @TypeGraphQLField(() => MenuIsCategory)
  isCategory!: MenuIsCategory;

  @TypeGraphQLField({ nullable: true })
  remark?: string;

  @TypeGraphQLField({ nullable: true })
  supreiorId?: string;

  @TypeGraphQLField({ nullable: true })
  platformId?: string;
}

@TypeGraphQLInputType()
export class MenuUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  code?: string;

  @TypeGraphQLField({ nullable: true })
  path?: string;

  @TypeGraphQLField({ nullable: true })
  icon?: string;

  @TypeGraphQLField({ nullable: true })
  order?: number;

  @TypeGraphQLField(() => MenuIsCategory, { nullable: true })
  isCategory?: MenuIsCategory;

  @TypeGraphQLField({ nullable: true })
  remark?: string;

  @TypeGraphQLField({ nullable: true })
  supreiorId?: string;

  @TypeGraphQLField({ nullable: true })
  platformId?: string;
}

@ArgsType()
export class MenuWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => MenuWhereInput, { nullable: true })
  where?: MenuWhereInput;

  @TypeGraphQLField(() => MenuOrderByEnum, { nullable: true })
  orderBy?: MenuOrderByEnum;
}

@ArgsType()
export class MenuCreateManyArgs {
  @TypeGraphQLField(() => [MenuCreateInput])
  data!: MenuCreateInput[];
}

@ArgsType()
export class MenuUpdateArgs {
  @TypeGraphQLField() data!: MenuUpdateInput;
  @TypeGraphQLField() where!: MenuWhereUniqueInput;
}
